<VisualMicro>
  <Program Name="sun_tracker_pwm" Ext=".ino" Location="C:\Users\etsar\Documents\Arduino\sun_tracker_pwm">
    <Compile IsDebugStart="1" IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\etsar\AppData\Local\Temp\VMBuilds\sun_tracker_pwm\teensy31\Debug" ReCompileIfSourceIsNewer="1" SketchName="sun_tracker_pwm" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE_USBAPI 17;VM_DEBUGGER_TYPE_SERIALUSB 18;VM_DEBUGGER_TYPE_MS430_SERIAL_ 19;VM_DEBUGGER_TYPE_NO_SERIAL 20;VM_DEBUGGER_TYPE_GENERIC_OBJECT 21;VM_DEBUG_ENABLE 1;VM_DEBUG;VM_DEBUG_BANDWIDTH_THROTTLE_MS 33;VM_DEBUGGER_SOFT_TRANSPORT Serial;VM_DEBUGGER_SOFT_TRANSPORT_WRITER Serial;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_GENERIC_OBJECT;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="teensy" Platform="teensy3" Architecture="hardware">
      <Board Name="teensy31" Description="Teensy 3.2 / 3.1" CoreFolder="C:\Arduino1.8.5\hardware\teensy\avr\cores\teensy3" VariantFullPath="" McuIdePath="C:\Arduino1.8.5" McuSketchBookPath="C:\Users\etsar\Documents\Arduino" name="Teensy 3.2 / 3.1" upload.maximum_size="262144" upload.maximum_data_size="65536" upload.tool="teensyloader" upload.protocol="halfkay" build.board="TEENSY31" build.core="teensy3" build.mcu="mk20dx256" build.warn_data_percentage="97" build.toolchain="arm/bin/" build.command.gcc="arm-none-eabi-gcc" build.command.ar="arm-none-eabi-gcc-ar" build.command.objcopy="arm-none-eabi-objcopy" build.command.objdump="arm-none-eabi-objdump" build.command.linker="arm-none-eabi-gcc" build.command.size="arm-none-eabi-size" build.flags.common="-g -Wall -ffunction-sections -fdata-sections -nostdlib" build.flags.dep="-MMD" build.flags.optimize="-O2" build.flags.cpu="-mthumb -mcpu=cortex-m4 -fsingle-precision-constant" build.flags.defs="-D__MK20DX256__ -DTEENSYDUINO=147" build.flags.cpp="-fno-exceptions -fpermissive -felide-constructors -std=gnu++14 -Wno-error=narrowing -fno-rtti" build.flags.c="" build.flags.S="-x assembler-with-cpp" build.flags.ld="-Wl,--gc-sections,--relax,--defsym=__rtc_localtime={extra.time.local} &quot;-T{build.core.path}/mk20dx256.ld&quot; -lstdc++" build.flags.libs="-larm_cortexM4l_math -lm" serial.restart_cmd="false" menu.usb.serial="Serial" menu.usb.serial.build.usbtype="USB_SERIAL" menu.usb.keyboard="Keyboard" menu.usb.keyboard.build.usbtype="USB_KEYBOARDONLY" menu.usb.keyboard.fake_serial="teensy_gateway" menu.usb.touch="Keyboard + Touch Screen" menu.usb.touch.build.usbtype="USB_TOUCHSCREEN" menu.usb.touch.fake_serial="teensy_gateway" menu.usb.hidtouch="Keyboard + Mouse + Touch Screen" menu.usb.hidtouch.build.usbtype="USB_HID_TOUCHSCREEN" menu.usb.hidtouch.fake_serial="teensy_gateway" menu.usb.hid="Keyboard + Mouse + Joystick" menu.usb.hid.build.usbtype="USB_HID" menu.usb.hid.fake_serial="teensy_gateway" menu.usb.serialhid="Serial + Keyboard + Mouse + Joystick" menu.usb.serialhid.build.usbtype="USB_SERIAL_HID" menu.usb.midi="MIDI" menu.usb.midi.build.usbtype="USB_MIDI" menu.usb.midi.fake_serial="teensy_gateway" menu.usb.midi4="MIDIx4" menu.usb.midi4.build.usbtype="USB_MIDI4" menu.usb.midi4.fake_serial="teensy_gateway" menu.usb.midi16="MIDIx16" menu.usb.midi16.build.usbtype="USB_MIDI16" menu.usb.midi16.fake_serial="teensy_gateway" menu.usb.serialmidi="Serial + MIDI" menu.usb.serialmidi.build.usbtype="USB_MIDI_SERIAL" menu.usb.serialmidi4="Serial + MIDIx4" menu.usb.serialmidi4.build.usbtype="USB_MIDI4_SERIAL" menu.usb.serialmidi16="Serial + MIDIx16" menu.usb.serialmidi16.build.usbtype="USB_MIDI16_SERIAL" menu.usb.audio="Audio" menu.usb.audio.build.usbtype="USB_AUDIO" menu.usb.audio.fake_serial="teensy_gateway" menu.usb.serialmidiaudio="Serial + MIDI + Audio" menu.usb.serialmidiaudio.build.usbtype="USB_MIDI_AUDIO_SERIAL" menu.usb.serialmidi16audio="Serial + MIDIx16 + Audio" menu.usb.serialmidi16audio.build.usbtype="USB_MIDI16_AUDIO_SERIAL" menu.usb.mtp="MTP Disk (Experimental)" menu.usb.mtp.build.usbtype="USB_MTPDISK" menu.usb.mtp.fake_serial="teensy_gateway" menu.usb.rawhid="Raw HID" menu.usb.rawhid.build.usbtype="USB_RAWHID" menu.usb.rawhid.fake_serial="teensy_gateway" menu.usb.flightsim="Flight Sim Controls" menu.usb.flightsim.build.usbtype="USB_FLIGHTSIM" menu.usb.flightsim.fake_serial="teensy_gateway" menu.usb.flightsimjoystick="Flight Sim Controls + Joystick" menu.usb.flightsimjoystick.build.usbtype="USB_FLIGHTSIM_JOYSTICK" menu.usb.flightsimjoystick.fake_serial="teensy_gateway" menu.usb.everything="All of the Above" menu.usb.everything.build.usbtype="USB_EVERYTHING" menu.usb.disable="No USB" menu.usb.disable.build.usbtype="USB_DISABLED" menu.speed.96="96 MHz (overclock)" menu.speed.72="72 MHz" menu.speed.48="48 MHz" menu.speed.24="24 MHz" menu.speed.16="16 MHz (No USB)" menu.speed.8="8 MHz (No USB)" menu.speed.4="4 MHz (No USB)" menu.speed.2="2 MHz (No USB)" menu.speed.120="120 MHz (overclock)" menu.speed.168.build.fcpu="168000000" menu.speed.144.build.fcpu="144000000" menu.speed.120.build.fcpu="120000000" menu.speed.96.build.fcpu="96000000" menu.speed.72.build.fcpu="72000000" menu.speed.48.build.fcpu="48000000" menu.speed.24.build.fcpu="24000000" menu.speed.16.build.fcpu="16000000" menu.speed.8.build.fcpu="8000000" menu.speed.4.build.fcpu="4000000" menu.speed.2.build.fcpu="2000000" menu.opt.o2std="Faster" menu.opt.o2std.build.flags.optimize="-O2" menu.opt.o2std.build.flags.ldspecs="" menu.opt.o2lto="Faster with LTO" menu.opt.o2lto.build.flags.optimize="-O2 -flto -fno-fat-lto-objects" menu.opt.o2lto.build.flags.ldspecs="-fuse-linker-plugin" menu.opt.o1std="Fast" menu.opt.o1std.build.flags.optimize="-O1" menu.opt.o1std.build.flags.ldspecs="" menu.opt.o1lto="Fast with LTO" menu.opt.o1lto.build.flags.optimize="-O1 -flto -fno-fat-lto-objects" menu.opt.o1lto.build.flags.ldspecs="-fuse-linker-plugin" menu.opt.o3std="Fastest" menu.opt.o3std.build.flags.optimize="-O3" menu.opt.o3std.build.flags.ldspecs="" menu.opt.o3purestd="Fastest + pure-code" menu.opt.o3purestd.build.flags.optimize="-O3 -mpure-code -D__PURE_CODE__" menu.opt.o3purestd.build.flags.ldspecs="" menu.opt.o3lto="Fastest with LTO" menu.opt.o3lto.build.flags.optimize="-O3 -flto -fno-fat-lto-objects" menu.opt.o3lto.build.flags.ldspecs="-fuse-linker-plugin" menu.opt.o3purelto="Fastest + pure-code with LTO" menu.opt.o3purelto.build.flags.optimize="-O3 -mpure-code -D__PURE_CODE__ -flto -fno-fat-lto-objects" menu.opt.o3purelto.build.flags.ldspecs="-fuse-linker-plugin" menu.opt.ogstd="Debug" menu.opt.ogstd.build.flags.optimize="-Og" menu.opt.ogstd.build.flags.ldspecs="" menu.opt.oglto="Debug with LTO" menu.opt.oglto.build.flags.optimize="-Og -flto -fno-fat-lto-objects" menu.opt.oglto.build.flags.ldspecs="-fuse-linker-plugin" menu.opt.osstd="Smallest Code" menu.opt.osstd.build.flags.optimize="-Os --specs=nano.specs" menu.opt.osstd.build.flags.ldspecs="" menu.opt.oslto="Smallest Code with LTO" menu.opt.oslto.build.flags.optimize="-Os -flto -fno-fat-lto-objects --specs=nano.specs" menu.opt.oslto.build.flags.ldspecs="-fuse-linker-plugin" menu.keys.en-us="US English" menu.keys.en-us.build.keylayout="US_ENGLISH" menu.keys.fr-ca="Canadian French" menu.keys.fr-ca.build.keylayout="CANADIAN_FRENCH" menu.keys.xx-ca="Canadian Multilingual" menu.keys.xx-ca.build.keylayout="CANADIAN_MULTILINGUAL" menu.keys.cz-cz="Czech" menu.keys.cz-cz.build.keylayout="CZECH" menu.keys.da-da="Danish" menu.keys.da-da.build.keylayout="DANISH" menu.keys.fi-fi="Finnish" menu.keys.fi-fi.build.keylayout="FINNISH" menu.keys.fr-fr="French" menu.keys.fr-fr.build.keylayout="FRENCH" menu.keys.fr-be="French Belgian" menu.keys.fr-be.build.keylayout="FRENCH_BELGIAN" menu.keys.fr-ch="French Swiss" menu.keys.fr-ch.build.keylayout="FRENCH_SWISS" menu.keys.de-de="German" menu.keys.de-de.build.keylayout="GERMAN" menu.keys.de-dm="German (Mac)" menu.keys.de-dm.build.keylayout="GERMAN_MAC" menu.keys.de-ch="German Swiss" menu.keys.de-ch.build.keylayout="GERMAN_SWISS" menu.keys.is-is="Icelandic" menu.keys.is-is.build.keylayout="ICELANDIC" menu.keys.en-ie="Irish" menu.keys.en-ie.build.keylayout="IRISH" menu.keys.it-it="Italian" menu.keys.it-it.build.keylayout="ITALIAN" menu.keys.no-no="Norwegian" menu.keys.no-no.build.keylayout="NORWEGIAN" menu.keys.pt-pt="Portuguese" menu.keys.pt-pt.build.keylayout="PORTUGUESE" menu.keys.pt-br="Portuguese Brazilian" menu.keys.pt-br.build.keylayout="PORTUGUESE_BRAZILIAN" menu.keys.rs-rs="Serbian (Latin Only)" menu.keys.rs-rs.build.keylayout="SERBIAN_LATIN_ONLY" menu.keys.es-es="Spanish" menu.keys.es-es.build.keylayout="SPANISH" menu.keys.es-mx="Spanish Latin America" menu.keys.es-mx.build.keylayout="SPANISH_LATIN_AMERICA" menu.keys.sv-se="Swedish" menu.keys.sv-se.build.keylayout="SWEDISH" menu.keys.tr-tr="Turkish (partial)" menu.keys.tr-tr.build.keylayout="TURKISH" menu.keys.en-gb="United Kingdom" menu.keys.en-gb.build.keylayout="UNITED_KINGDOM" menu.keys.usint="US International" menu.keys.usint.build.keylayout="US_INTERNATIONAL" vid.0="0x16C0" vid.1="0x16C0" vid.2="0x16C0" vid.3="0x16C0" vid.4="0x16C0" pid.0="0x0483" pid.1="0x0487" pid.2="0x0489" pid.3="0x048A" pid.4="0x0476" runtime.ide.path="C:\Arduino1.8.5" runtime.os="windows" build.system.path="C:\Arduino1.8.5\hardware\teensy\avr\system" runtime.ide.version="10809" target_package="teensy" target_platform="teensy3" runtime.hardware.path="C:\Arduino1.8.5\hardware\teensy" originalid="teensy31" vm.run_sketch_prebuild_before_build="true" intellisense.include.paths.more="{vmresolved.compiler.path}arm\arm-none-eabi\include;{vmresolved.compiler.path}arm\lib\gcc\arm-none-eabi\5.4.1\include;{vmresolved.compiler.path}arm\arm-none-eabi\include\c++\5.4.1;{vmresolved.compiler.path}arm\arm-none-eabi\include\c++\5.4.1\tr1;{vmresolved.compiler.path}arm\arm-none-eabi\include\c++\5.4.1\bits;{vmresolved.compiler.path}arm\arm-none-eabi\include\c++\5.4.1\arm-none-eabi;" version="1.8.5" rewriting="disabled" compiler.path="{runtime.hardware.path}/../tools/" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" recipe.preproc.includes="&quot;{compiler.path}{build.toolchain}{build.command.g++}&quot; -M -MG -MP -x c++ -w {build.flags.cpp} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} {includes} &quot;{source_file}&quot;" recipe.preproc.macros="&quot;{compiler.path}{build.toolchain}{build.command.g++}&quot; -E -CC -x c++ -w {compiler.cpp.flags} {build.flags.common} {build.flags.cpp} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} {includes} &quot;{source_file}&quot; -o &quot;{preprocessed_file_path}&quot;" tools.arduino-preprocessor.path="{runtime.tools.arduino-preprocessor.path}" tools.arduino-preprocessor.cmd.path="{path}/arduino-preprocessor" tools.arduino-preprocessor.pattern="&quot;{cmd.path}&quot; &quot;{source_file}&quot; &quot;{codecomplete}&quot; -- -std=gnu++14" recipe.hooks.sketch.prebuild.1.pattern="&quot;{compiler.path}precompile_helper&quot; &quot;{runtime.platform.path}/cores/{build.core}&quot; &quot;{build.path}&quot; &quot;{compiler.path}{build.toolchain}{build.command.g++}&quot; -x c++-header {build.flags.optimize} {build.flags.common} {build.flags.dep} {build.flags.cpp} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} &quot;-I{runtime.platform.path}/cores/{build.core}&quot; &quot;{build.path}/pch/Arduino.h&quot; -o &quot;{build.path}/pch/Arduino.h.gch&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{build.toolchain}{build.command.g++}&quot; -c {build.flags.optimize} {build.flags.common} {build.flags.dep} {build.flags.cpp} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} &quot;-I{build.path}/pch&quot; {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.c.o.pattern="&quot;{compiler.path}{build.toolchain}{build.command.gcc}&quot; -c {build.flags.optimize} {build.flags.common} {build.flags.dep} {build.flags.c} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{build.toolchain}{build.command.gcc}&quot; -c {build.flags.optimize} {build.flags.common} {build.flags.dep} {build.flags.S} {build.flags.cpu} {build.flags.defs} -DARDUINO={runtime.ide.version} -DF_CPU={build.fcpu} -D{build.usbtype} -DLAYOUT_{build.keylayout} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.ar.pattern="&quot;{compiler.path}{build.toolchain}{build.command.ar}&quot; rcs &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{build.toolchain}{build.command.linker}&quot; {build.flags.optimize} {build.flags.ld} {build.flags.ldspecs} {build.flags.cpu} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; {build.flags.libs}" recipe.elfpatch.pattern="&quot;{compiler.path}/hardware/tools/{build.elfpatch}&quot; -mmcu={build.mcu} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{sketch_path}/disk&quot;" recipe.objcopy.eep.pattern="&quot;{compiler.path}{build.toolchain}{build.command.objcopy}&quot; {compiler.objcopy.eep.flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{build.toolchain}{build.command.objcopy}&quot; {compiler.elf2hex.flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.hooks.postbuild.1.pattern="&quot;{compiler.path}stdout_redirect&quot; &quot;{build.path}/{build.project_name}.lst&quot; &quot;{compiler.path}{build.toolchain}{build.command.objdump}&quot; -d -S -C &quot;{build.path}/{build.project_name}.elf&quot;" recipe.hooks.postbuild.2.pattern="&quot;{compiler.path}stdout_redirect&quot; &quot;{build.path}/{build.project_name}.sym&quot; &quot;{compiler.path}{build.toolchain}{build.command.objdump}&quot; -t -C &quot;{build.path}/{build.project_name}.elf&quot;" recipe.hooks.postbuild.3.pattern="&quot;{compiler.path}teensy_post_compile&quot; &quot;-file={build.project_name}&quot; &quot;-path={build.path}&quot; &quot;-tools={compiler.path}&quot; &quot;-board={build.board}&quot;" recipe.size.pattern="&quot;{compiler.path}{build.toolchain}{build.command.size}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.text\.progmem|\.text\.itcm|\.data)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.usbdescriptortable|\.dmabuffers|\.usbbuffers|\.data|\.bss|\.bss\.dma|\.noinit|\.text\.itcm)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" discovery.teensy.pattern="&quot;{runtime.hardware.path}/../tools/teensy_ports&quot; -J2" tools.teensyloader.cmd.path="{runtime.hardware.path}/../tools" tools.teensyloader.upload.params.quiet="" tools.teensyloader.upload.params.verbose="-verbose" tools.teensyloader.upload.pattern="&quot;{cmd.path}/teensy_post_compile&quot; &quot;-file={build.project_name}&quot; &quot;-path={build.path}&quot; &quot;-tools={cmd.path}&quot; &quot;-board={build.board}&quot; -reboot &quot;-port={serial.port}&quot; &quot;-portlabel={serial.port.label}&quot; &quot;-portprotocol={serial.port.protocol}&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.board}.hex" recipe.output.tmp_file2="{build.project_name}.elf" recipe.output.save_file2="{build.project_name}.elf" vm.platform.root.path="c:\program files (x86)\microsoft visual studio\2017\professional\common7\ide\extensions\cpwzuv43.p51\Micro Platforms\arduino16x" runtime.tools.arduinoOTA.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\arduinoOTA\1.2.0" runtime.tools.arduinoOTA-1.1.1.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\arduinoOTA\1.1.1" runtime.tools.arduinoOTA-1.2.0.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\arduinoOTA\1.2.0" runtime.tools.arduinoOTA-1.2.1.path="C:\Arduino1.8.5\hardware\tools\avr" runtime.tools.arm-none-eabi-gcc.path="C:\Users\etsar\AppData\Local\arduino15\packages\mcci\tools\arm-none-eabi-gcc\6-2017-q2-update" runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.arm-none-eabi-gcc-6-2017-q2-update.path="C:\Users\etsar\AppData\Local\arduino15\packages\mcci\tools\arm-none-eabi-gcc\6-2017-q2-update" runtime.tools.avrdude.path="C:\Arduino1.8.5\hardware\tools\avr" runtime.tools.avrdude-6.0.1-arduino5.path="C:\Users\etsar\AppData\Local\arduino15\packages\SODAQ\tools\avrdude\6.0.1-arduino5" runtime.tools.avrdude-6.3.0-arduino14.path="C:\Arduino1.8.5\hardware\tools\avr" runtime.tools.avrdude-6.3.0-arduino9.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\avrdude\6.3.0-arduino9" runtime.tools.avr-gcc.path="C:\Arduino1.8.5\hardware\tools\avr" runtime.tools.avr-gcc-4.8.1-arduino5.path="C:\Users\etsar\AppData\Local\arduino15\packages\SODAQ\tools\avr-gcc\4.8.1-arduino5" runtime.tools.avr-gcc-4.9.2-atmel3.5.4-arduino2.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\avr-gcc\4.9.2-atmel3.5.4-arduino2" runtime.tools.avr-gcc-5.4.0-atmel3.6.1-arduino2.path="C:\Arduino1.8.5\hardware\tools\avr" runtime.tools.bossac.path="C:\Users\etsar\AppData\Local\arduino15\packages\SparkFun\tools\bossac\1.4.0" runtime.tools.bossac-1.4.0.path="C:\Users\etsar\AppData\Local\arduino15\packages\SparkFun\tools\bossac\1.4.0" runtime.tools.bossac-1.6.1-arduino.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\bossac\1.6.1-arduino" runtime.tools.bossac-1.7.0.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\bossac\1.7.0" runtime.tools.bossac-1.8.0-48-gb176eee.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\bossac\1.8.0-48-gb176eee" runtime.tools.CMSIS.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\CMSIS\4.5.0" runtime.tools.CMSIS-4.0.0-atmel.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\CMSIS\4.0.0-atmel" runtime.tools.CMSIS-4.5.0.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\CMSIS\4.5.0" runtime.tools.CMSIS-Atmel.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\CMSIS-Atmel\1.2.0" runtime.tools.CMSIS-Atmel-1.1.0.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\CMSIS-Atmel\1.1.0" runtime.tools.CMSIS-Atmel-1.2.0.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\CMSIS-Atmel\1.2.0" runtime.tools.esptool.path="C:\Users\etsar\AppData\Local\arduino15\packages\esp8266\tools\esptool\0.4.13" runtime.tools.esptool-0.4.13.path="C:\Users\etsar\AppData\Local\arduino15\packages\esp8266\tools\esptool\0.4.13" runtime.tools.mkspiffs.path="C:\Users\etsar\AppData\Local\arduino15\packages\esp8266\tools\mkspiffs\0.2.0" runtime.tools.mkspiffs-0.2.0.path="C:\Users\etsar\AppData\Local\arduino15\packages\esp8266\tools\mkspiffs\0.2.0" runtime.tools.navsparktool.path="C:\Users\etsar\AppData\Local\arduino15\packages\navspark\tools\navsparktool\1.0.1" runtime.tools.navsparktool-1.0.1.path="C:\Users\etsar\AppData\Local\arduino15\packages\navspark\tools\navsparktool\1.0.1" runtime.tools.openocd.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\openocd\0.9.0-arduino6-static" runtime.tools.openocd-0.9.0-arduino.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\openocd\0.9.0-arduino" runtime.tools.openocd-0.9.0-arduino6-static.path="C:\Users\etsar\AppData\Local\arduino15\packages\arduino\tools\openocd\0.9.0-arduino6-static" runtime.tools.STM32Tools.path="C:\Users\etsar\AppData\Local\arduino15\packages\mcci\tools\STM32Tools\2018.3.23-mcci" runtime.tools.STM32Tools-2018.3.23-mcci.path="C:\Users\etsar\AppData\Local\arduino15\packages\mcci\tools\STM32Tools\2018.3.23-mcci" runtime.tools.tools-avr.path="C:\Arduino1.8.5\hardware\tools\avr" runtime.tools.xtensa-lx106-elf-gcc.path="C:\Users\etsar\AppData\Local\arduino15\packages\esp8266\tools\xtensa-lx106-elf-gcc\1.20.0-26-gb404fb9-2" runtime.tools.xtensa-lx106-elf-gcc-1.20.0-26-gb404fb9-2.path="C:\Users\etsar\AppData\Local\arduino15\packages\esp8266\tools\xtensa-lx106-elf-gcc\1.20.0-26-gb404fb9-2" runtime.vm.boardinfo.id="teensy31" runtime.vm.boardinfo.name="teensy31" runtime.vm.boardinfo.desc="Teensy 3.2 / 3.1" runtime.vm.boardinfo.src_location="C:\Arduino1.8.5\hardware\teensy\avr" ide.hint="Use installed IDE. Provides built-in hardware, reference/help and libraries." ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.9.0" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="Arduino.h" ide.exe_name="arduino" ide.recipe.preproc.defines.flags="-w -x c++ -E -dM" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.builder.exe="arduinobuilder.exe" ide.builder.name="Arduino Builder" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}\java\bin" ide.debug_menu.debugger_type="Debug" ide.debug_menu.debugger_type.none="Off" ide.debug_menu.none.debug.tool="no_debug" ide.debug_menu.debugger_type.universal="Serial" ide.debug_menu.universal.debug.tool="auto" ide.debug_menu.debugger_type.hwdebugger="Hardware" ide.debug_menu.hwdebugger="Debugger" ide.debug_menu.hwdebugger.custom_debugger="Manual/Custom" ide.debug_menu.hwdebugger.custom_debugger.debug.tool="dbg_external" ide.meta_custom_debugger.sentence="Provides a build that includes debug defines and will launch a custom debugger if one is provided." ide.meta_custom_debugger.paragraph="This is option is for advanced use. It is recommended that a pre-configured debugger be selected when available in this list. Usage: Optionally add a customer debugger to the project. A 'debugger_launch.json' file shares the same command syntax that is used by the VsCode debugger. Custom debuggers can be targeted at a board and/or variant and/or configuration name. IE: [variant].[configuration_name][.]debugger_launch.json" ide.meta_custom_debugger.reference.usage.url="https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md#customlaunchsetupcommands" ide.meta_custom_debugger.reference.connect.url="https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects?view=vs-2019" ide.compiler_flags_no_opt="-O0" ide.debug_menu.vm_disable_optimization="Disable Optimization" ide.debug_menu.vm_disable_optimization.vm_disable_opt_default="Default Optimization" ide.debug_menu.vm_disable_optimization.vm_disable_opt_proj="No Project  Optimization" ide.debug_menu.vm_disable_opt_proj.vm_disable_opt_project="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_optimization.vm_disable_opt_proj_libs="No Project + Libraries Optimization" ide.debug_menu.vm_disable_opt_proj_libs.vm_disable_opt_project="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_opt_proj_libs.vm_disable_opt_libraries="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_optimization.vm_disable_opt_all="No Optimization" ide.meta_vm_disable_opt_all.sentence="Disable compiler optimization for all sources:- Project, Library and Platform." ide.meta_vm_disable_opt_all.comment="After switching between 'No Optimization' and other optimization values, please click &quot;Solution Clean&quot; or switch off (or cycle) 'vMicro&gt;Compiler&gt;Shared Cache For Cores'. NOTE: Changing optimization settings can cause build errors or result in overly large programs." ide.debug_menu.vm_disable_opt_all.vm_disable_opt_project="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_opt_all.vm_disable_opt_libraries="{ide.compiler_flags_no_opt}" ide.debug_menu.vm_disable_opt_all.vm_disable_opt_core="{ide.compiler_flags_no_opt}" ide.appid="arduino16x" location.sketchbook="C:\Users\etsar\Documents\Arduino" build.core.vmresolved="C:\Arduino1.8.5\hardware\teensy\avr\cores\teensy3" build.core.parentfolder.vmresolved="C:\Arduino1.8.5\hardware\teensy\avr\cores" build.core.coresparentfolder.vmresolved="C:\Arduino1.8.5\hardware\teensy\avr" build.core.path="C:\Arduino1.8.5\hardware\teensy\avr\cores\teensy3" vm.core.include="arduino.h" vm.boardsource.path="C:\Arduino1.8.5\hardware\teensy\avr" runtime.platform.path="C:\Arduino1.8.5\hardware\teensy\avr" vm.platformname.name="teensy3" build.arch="TEENSY3" vm.runtime.compiler.cached_cores_path="C:\Users\etsar\AppData\Local\Temp\VMBCore\arduino16x" vm.runtime.compiler.showwarnings="false" vm.runtime.compiler.showwarnings_core="false" vm.runtime.compiler.showwarnings_library="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" runtime.vm.ide.platforms.path="c:\program files (x86)\microsoft visual studio\2017\professional\common7\ide\extensions\cpwzuv43.p51\Micro Platforms" runtime.vm.ide.tools.openocd.path="{runtime.tools.openocd-0.9.0.path}" runtime.vm.openocd.path="{runtime.tools.openocd-0.9.0.path}" vm.runtime.build.intermediate_output_path="C:\Users\etsar\Documents\Arduino\sun_tracker_pwm\Debug\" vm.runtime.build.final_output_path="C:\Users\etsar\Documents\Visual Studio 2017\Projects\Azimuth_Elevation\Debug\" compiler.always_include_sketchfolder="true" compiler.always_include_sharedprojectfolders="true" vm.runtime.compiler.auto_discover_includes="true" vm.runtime.compiler.allow_library_debugging="false" serial.port.file="COM5" serial.port="COM5" serial.port.num="5" extra.time.local="1573194145" extra.time.utc="1573212145" extra.time.dst="-18000" extra.time.zone="18000" serial.port.caption="COM5   - USB Serial Device" serial.Caption="USB Serial Device (COM5)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_02" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="USB Serial Device" serial.DeviceID="USB\VID_16C0&amp;PID_0483\3119650" serial.HardwareID.value0="USB\VID_16C0&amp;PID_0483" serial.Manufacturer="Microsoft" serial.Name="USB Serial Device (COM5)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_16C0&amp;PID_0483\3119650" serial.Present="True" serial.Service="usbser" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="ET-ASUS-SD" serial.vid="0x16C0" serial.pid="0x0483" serial.vidpid="16C00483" serial.vid_pid="0x16C0_0x0483" serial.iserial="3119650" serial.port.iserial="3119650" build.project_name="sun_tracker_pwm.ino" build.project_path="C:\Users\etsar\Documents\Arduino\sun_tracker_pwm" sketch_path="C:\Users\etsar\Documents\Arduino\sun_tracker_pwm" ProjectDir="C:\Users\etsar\Documents\Arduino\sun_tracker_pwm\" build.path="C:\Users\etsar\AppData\Local\Temp\VMBuilds\sun_tracker_pwm\teensy31\Debug" debug.tool="auto" build.usbtype="USB_SERIAL" build.fcpu="96000000" build.flags.ldspecs="" build.keylayout="US_ENGLISH" vm.runtime.compile.skip_library_file_if_exists_in_project="false" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\etsar\AppData\Local\Temp\VMBuilds\sun_tracker_pwm\teensy31\Debug" build.architecture="hardware" vmresolved.compiler.path="C:\Arduino1.8.5\hardware\tools\" vmresolved.tools.path="C:\Arduino1.8.5\hardware" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" InBreakLiveView="1" PerfStats="0" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="sun_tracker.ino, line 64" Id="35b9c09e-edf8-479c-8f46-16ade7d6359f" Enabled="1" Message="  Millis is currently {millis()}.&#xD;&#xA;    This tutorial debug trace point prints a message every 250ms&#xD;&#xA;    The break point property called 'Continue Execution' controls if code should pause here and wait for you to click 'Continue'.&#xD;&#xA;    To stop debug, click stop debugging or close/stop the serial monitor.&#xD;&#xA;    When debug ends, serial debug will continue to break/pause the mcu or transmit trace message, wifi debug will not.&#xD;&#xA;    This breakpoint exists at the start of the loop() function, where you see a red dot.&#xD;&#xA;    The red dot is a ‘breakpoint’. Edit the properties of a breakpoint by right clicking it or open the 'Debug&gt;Other Windows&gt;Breakpoint List'&#xD;&#xA;    This breakpoint is automatically set by Visual Micro to demonstrate the Arduino debugger.&#xD;&#xA;    Add your own breakpoints by placing the cursor on any code line and pressing F9. Press F9 again to delete the breakpoint.&#xD;&#xA;    Read more about the Visual Micro debugger at https://www.visualmicro.com/page/Debugging-for-Arduino.aspx&#xD;&#xA;    Take some time to learn about debugging, it’s worth it!&#xD;&#xA;    To switch the demo breakpoint and other tips off, deselect Visual Micro&gt;General&gt;Tutorial Mode.&#xD;&#xA;    Switch debugging off by changing from tool bar (Configuratin) from 'Debug' to 'Release'" MessageTextType="0" PreProcessedMessage="  Millis is currently {0}.&#xD;&#xA;    This tutorial debug trace point prints a message every 250ms&#xD;&#xA;    The break point property called 'Continue Execution' controls if code should pause here and wait for you to click 'Continue'.&#xD;&#xA;    To stop debug, click stop debugging or close/stop the serial monitor.&#xD;&#xA;    When debug ends, serial debug will continue to break/pause the mcu or transmit trace message, wifi debug will not.&#xD;&#xA;    This breakpoint exists at the start of the loop() function, where you see a red dot.&#xD;&#xA;    The red dot is a ‘breakpoint’. Edit the properties of a breakpoint by right clicking it or open the 'Debug&gt;Other Windows&gt;Breakpoint List'&#xD;&#xA;    This breakpoint is automatically set by Visual Micro to demonstrate the Arduino debugger.&#xD;&#xA;    Add your own breakpoints by placing the cursor on any code line and pressing F9. Press F9 again to delete the breakpoint.&#xD;&#xA;    Read more about the Visual Micro debugger at https://www.visualmicro.com/page/Debugging-for-Arduino.aspx&#xD;&#xA;    Take some time to learn about debugging, it’s worth it!&#xD;&#xA;    To switch the demo breakpoint and other tips off, deselect Visual Micro&gt;General&gt;Tutorial Mode.&#xD;&#xA;    Switch debugging off by changing from tool bar (Configuratin) from 'Debug' to 'Release'" Condition="millis()&gt;0 || millis()&gt;1" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\sun_tracker\sun_tracker.ino" FileLine="64" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="250" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='35b9c09e-edf8-479c-8f46-16ade7d6359f'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>57	   // t.every(60000, calculate_sun_position); //1 min
58		//calculate_sun_position();
59		//printdata();
60	
61	}
62	
63	
--&gt;64	void loop()
65	{
66		t.update();
67	}
68	
69	void calculate_sun_position() {
70	
71		codes c;
72		c = SPA_ALL;
73	
</Source>
        <MessageVariables>
          <MessageVariable Name="millis()" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="2" Name="pwmtest.ino, line 196" Id="6bd76262-9e8d-43fb-873c-adeb78217d85" Enabled="1" Message="{theta}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\pwmtest\pwmtest.ino" FileLine="196" FileColumn="1" FunctionName="feedback360()" FunctionLineOffset="50" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='6bd76262-9e8d-43fb-873c-adeb78217d85'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>189				
190	
191			if (theta &lt; 0)                             // Keep theta valid
192				theta = 0;
193			else if (theta &gt; (unitsFC - 1))
194				theta = unitsFC - 1;
195	
--&gt;196			if (theta == targetAngle) {
197				pwm.setPWM(0, 0, 320);
198				
199			}
200			
201			// If transition from quadrant 4 to  
202			// quadrant 1, increase turns count. 
203			if ((theta &lt; q2min) &amp;&amp; (thetaP &gt; q3max))
204				turns++;
205			// If transition from quadrant 1 to  
</Source>
        <MessageVariables>
          <MessageVariable Name="theta" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="3" Name="pwmtest.ino, line 180" Id="923413ed-2c5f-4937-a213-c1d069247a7c" Enabled="1" Message="{tHigh}  {tLow}" MessageTextType="2" PreProcessedMessage="{0}  {1}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\pwmtest\pwmtest.ino" FileLine="180" FileColumn="1" FunctionName="feedback360()" FunctionLineOffset="34" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='923413ed-2c5f-4937-a213-c1d069247a7c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>173			// times (a high and a low on opposite sides of the 0/359 boundary
174			// will not be valid.
175			int tCycle = 0;                           // Clear cycle time
176			while (1)                                  // Keep checking
177			{
178				tHigh = pulseIn(PWM_PIN, 1);       // Measure time high
179				tLow = pulseIn(PWM_PIN, 0);        // Measure time low
--&gt;180				tCycle = tHigh + tLow;
181				if ((tCycle &gt; 1000) &amp;&amp; (tCycle &lt; 1200))  // If cycle time valid 
182					break;                                // break from loop
183			}
184			dc = (dutyScale * tHigh) / tCycle;        // Calculate duty cycle
185	
186			// This gives a theta increasing int the
187			// counterclockwise direction.
188			theta = (unitsFC - 1) - ((dc - dcMin) * unitsFC)/ (dcMax - dcMin + 1);              // Calculate angle
189				
</Source>
        <MessageVariables>
          <MessageVariable Name="tHigh" Index="1" />
          <MessageVariable Name="tLow" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="4" Name="pwmtest.ino, line 132" Id="749acb81-fe1e-4c4d-b663-af6e377bf1cd" Enabled="1" Message="{theta}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\pwmtest\pwmtest.ino" FileLine="132" FileColumn="1" FunctionName="loop()" FunctionLineOffset="23" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='749acb81-fe1e-4c4d-b663-af6e377bf1cd'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>125	
126	
127		//if (theta &lt; 0)                             // Keep theta valid
128		//	theta = 0;
129		//else if (theta &gt; (unitsFC - 1))
130		//	theta = unitsFC - 1;
131	
--&gt;132		if (targetAngle == 0 ) {
133			if (theta&gt;357) {
134				pwm.setPWM(0, 0, 324); //stop
135				delay(20);
136			}
137		}
138		else {
139			if (theta &gt;= targetAngle) {
140				pwm.setPWM(0, 0, 324);
141				delay(20);
</Source>
        <MessageVariables>
          <MessageVariable Name="theta" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="5" Name="pwmtest.ino, line 120" Id="d0223dbc-de81-4d7c-a85f-1239c06c7fb6" Enabled="1" Message="{tHigh} {tLow}" MessageTextType="2" PreProcessedMessage="{0} {1}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\pwmtest\pwmtest.ino" FileLine="120" FileColumn="1" FunctionName="loop()" FunctionLineOffset="11" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d0223dbc-de81-4d7c-a85f-1239c06c7fb6'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>113		// will not be valid.
114		int tCycle = 0;                           // Clear cycle time
115	
116			tHigh = pulseIn(PWM_PIN, 0);       // Measure time high - swap pins to measure clockwise
117			tLow = pulseIn(PWM_PIN, 1);        // Measure time low
118			tCycle = tHigh + tLow;
119	
--&gt;120		dc = (dutyScale * tHigh) / tCycle;        // Calculate duty cycle
121	
122		// This gives a theta increasing in the clockwise direction.
123		
124		theta = (unitsFC - 1) - ((dc - dcMin) * unitsFC) / (dcMax - dcMin + 1);              // Calculate angle
125	
126	
127		//if (theta &lt; 0)                             // Keep theta valid
128		//	theta = 0;
129		//else if (theta &gt; (unitsFC - 1))
</Source>
        <MessageVariables>
          <MessageVariable Name="tHigh" Index="1" />
          <MessageVariable Name="tLow" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="sun_tracker_pwm.ino, line 133" Id="7ee3bdfe-e843-4376-97cd-4bb5bff21b56" Enabled="1" Message="{val}{theta}{targetAngle}{direction}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}{3}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\sun_tracker_pwm\sun_tracker_pwm.ino" FileLine="133" FileColumn="1" FunctionName="loop()" FunctionLineOffset="27" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='7ee3bdfe-e843-4376-97cd-4bb5bff21b56'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>126		//if (targetAngle == 0) {
127	
128		//	if (val &lt; 9 || val == 1023 ) {
129		//		setServoPulse(PAN_SERVO, 1450);
130		//	}
131		//}
132		//else {
--&gt;133		//	if (direction) {
134		//		if (theta &gt;= targetAngle) {
135		//			setServoPulse(PAN_SERVO, 1450);
136		//		}
137		//	}
138		//	else {
139		//		
140		//		 if (targetAngle &gt;= theta) {
141		//			setServoPulse(PAN_SERVO, 1450);
142		//		}
</Source>
        <MessageVariables>
          <MessageVariable Name="val" Index="1" />
          <MessageVariable Name="theta" Index="2" />
          <MessageVariable Name="targetAngle" Index="3" />
          <MessageVariable Name="direction" Index="4" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="7" Name="sun_tracker_pwm.ino, line 129" Id="2dc5f56a-e553-4070-9157-f806e4d50370" Enabled="0" Message="{val} {theta}" MessageTextType="2" PreProcessedMessage="{0} {1}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\sun_tracker_pwm\sun_tracker_pwm.ino" FileLine="129" FileColumn="1" FunctionName="loop()" FunctionLineOffset="23" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='2dc5f56a-e553-4070-9157-f806e4d50370'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>122		//int val = analogRead(PAN_SERVO_PIN); // Calculate angle
123	
124		//theta = map(val, 0, 1023, 0, 360);
125	
126		//if (targetAngle == 0) {
127	
128		//	if (val &lt; 9 || val == 1023 ) {
--&gt;129		//		setServoPulse(PAN_SERVO, 1450);
130		//	}
131		//}
132		//else {
133		//	if (direction) {
134		//		if (theta &gt;= targetAngle) {
135		//			setServoPulse(PAN_SERVO, 1450);
136		//		}
137		//	}
138		//	else {
</Source>
        <MessageVariables>
          <MessageVariable Name="val" Index="1" />
          <MessageVariable Name="theta" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="8" Name="sun_tracker_pwm.ino, line 183" Id="e43dc88a-d22a-44e0-a6d9-f33034555058" Enabled="0" Message="{thta}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\sun_tracker_pwm\sun_tracker_pwm.ino" FileLine="183" FileColumn="1" FunctionName="MoveCounterclockwise(int angle)" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='e43dc88a-d22a-44e0-a6d9-f33034555058'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>176		targetAngle = angle;
177		setServoPulse(PAN_SERVO, 1800);
178	}
179	
180	
181	void MoveCounterclockwise(int angle) {
182		direction = 0;
--&gt;183		targetAngle = angle;
184		setServoPulse(PAN_SERVO, 1370);
185	}
186	
187	/*
188	Clockwise slow to fast
189	1520
190	2000
191	
192	Counterclockwise slow to fast
</Source>
        <MessageVariables>
          <MessageVariable Name="thta" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="9" Name="sun_tracker_pwm.ino, line 140" Id="c3571be9-74e0-4ee8-a957-a5a4b2d4cda2" Enabled="1" Message="{val}{theta}{targetAngle}{direction}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}{3}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\sun_tracker_pwm\sun_tracker_pwm.ino" FileLine="140" FileColumn="1" FunctionName="loop()" FunctionLineOffset="34" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c3571be9-74e0-4ee8-a957-a5a4b2d4cda2'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>133		//	if (direction) {
134		//		if (theta &gt;= targetAngle) {
135		//			setServoPulse(PAN_SERVO, 1450);
136		//		}
137		//	}
138		//	else {
139		//		
--&gt;140		//		 if (targetAngle &gt;= theta) {
141		//			setServoPulse(PAN_SERVO, 1450);
142		//		}
143		//	}
144		//}
145	}
146	
147	void read_pin(void *context) {
148	
149		int val = analogRead(PAN_SERVO_PIN); // Calculate angle
</Source>
        <MessageVariables>
          <MessageVariable Name="val" Index="1" />
          <MessageVariable Name="theta" Index="2" />
          <MessageVariable Name="targetAngle" Index="3" />
          <MessageVariable Name="direction" Index="4" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="10" Name="sun_tracker_pwm.ino, line 124" Id="bceac2a0-bdc1-4624-a206-4a88049ddfca" Enabled="1" Message="{val}{theta}{direction}{targetAngle}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}{3}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\sun_tracker_pwm\sun_tracker_pwm.ino" FileLine="124" FileColumn="1" FunctionName="loop()" FunctionLineOffset="18" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='bceac2a0-bdc1-4624-a206-4a88049ddfca'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>117	
118		//// This gives a theta increasing in the clockwise direction.
119	
120		//theta = (unitsFC - 1) - ((dc - dcMin) * unitsFC) / (dcMax - dcMin + 1);  
121		
122		//int val = analogRead(PAN_SERVO_PIN); // Calculate angle
123	
--&gt;124		//theta = map(val, 0, 1023, 0, 360);
125	
126		//if (targetAngle == 0) {
127	
128		//	if (val &lt; 9 || val == 1023 ) {
129		//		setServoPulse(PAN_SERVO, 1450);
130		//	}
131		//}
132		//else {
133		//	if (direction) {
</Source>
        <MessageVariables>
          <MessageVariable Name="val" Index="1" />
          <MessageVariable Name="theta" Index="2" />
          <MessageVariable Name="direction" Index="3" />
          <MessageVariable Name="targetAngle" Index="4" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="11" Name="sun_tracker_pwm.ino, line 232" Id="8dab6ce8-fd18-4b50-8fbb-1e3a364ef716" Enabled="0" Message="{val}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\sun_tracker_pwm\sun_tracker_pwm.ino" FileLine="232" FileColumn="1" FunctionName="current_theta()" FunctionLineOffset="13" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='8dab6ce8-fd18-4b50-8fbb-1e3a364ef716'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>225	
226	 // // Calcualte initial duty cycle and angle.
227		//dc = (dutyScale * tHigh) / (tHigh + tLow);
228		//return (unitsFC - 1) - ((dc - dcMin) * unitsFC) / (dcMax - dcMin + 1);
229	
230		int val = analogRead(PAN_SERVO_PIN);
231	
--&gt;232		return map(val, 0, 1023, 0, 360);
233	
234	}
235	
236	
237	void calculate_sun_position(void *context) {
238	
239		getRTC();
240	
241		spa.year = year;
</Source>
        <MessageVariables>
          <MessageVariable Name="val" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="12" Name="sun_tracker_pwm.ino, line 230" Id="eccbe4e3-20e8-466f-bb8c-b88150d7524b" Enabled="0" Message="'theta'" MessageTextType="0" PreProcessedMessage="'theta'" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\sun_tracker_pwm\sun_tracker_pwm.ino" FileLine="230" FileColumn="1" FunctionName="current_theta()" FunctionLineOffset="11" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='eccbe4e3-20e8-466f-bb8c-b88150d7524b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>223		//tLow = pulseIn(TILT_SERVO_PIN, 1);            // Measure low time 
224		//tHigh = pulseIn(TILT_SERVO_PIN, 0);           // Measure high time
225	
226	 // // Calcualte initial duty cycle and angle.
227		//dc = (dutyScale * tHigh) / (tHigh + tLow);
228		//return (unitsFC - 1) - ((dc - dcMin) * unitsFC) / (dcMax - dcMin + 1);
229	
--&gt;230		int val = analogRead(PAN_SERVO_PIN);
231	
232		return map(val, 0, 1023, 0, 360);
233	
234	}
235	
236	
237	void calculate_sun_position(void *context) {
238	
239		getRTC();
</Source>
      </BreakPoint>
      <BreakPoint Index="13" Name="sun_tracker_pwm.ino, line 279" Id="9f92339b-9bb5-4bb1-b746-0c9469f70f13" Enabled="1" Message="{azimuth} {cth} {atZero}" MessageTextType="2" PreProcessedMessage="{0} {1} {2}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\sun_tracker_pwm\sun_tracker_pwm.ino" FileLine="279" FileColumn="1" FunctionName="calculate_sun_position(void *context)" FunctionLineOffset="39" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='9f92339b-9bb5-4bb1-b746-0c9469f70f13'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>272			setServoPulse(PAN_SERVO, 1700);
273			delay(400);
274			cth = 0;
275			atZero = false;
276		}
277		
278		 if ((int)azimuth &gt; cth) {
--&gt;279			MoveClockwise((int)azimuth);
280			//	Move(current_theta()+5);
281			//delay(20);
282		}
283		
284		printdata();
285	
286	}
287	
288	void dstcalc() {
</Source>
        <MessageVariables>
          <MessageVariable Name="azimuth" Index="1" />
          <MessageVariable Name="cth" Index="2" />
          <MessageVariable Name="atZero" Index="3" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="14" Name="sun_tracker_pwm.ino, line 267" Id="7490b9e3-b5e7-48c4-a091-0a5727308f85" Enabled="1" Message="{cth} {azimuth} {atZero}" MessageTextType="2" PreProcessedMessage="{0} {1} {2}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\sun_tracker_pwm\sun_tracker_pwm.ino" FileLine="267" FileColumn="1" FunctionName="calculate_sun_position(void *context)" FunctionLineOffset="31" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='7490b9e3-b5e7-48c4-a091-0a5727308f85'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>260		spa_calculate(&amp;spa);
261	
262		elevation = spa.e;
263		azimuth = spa.azimuth;
264		sunrise = spa.sunrise;
265		sunset = spa.sunset;
266	
--&gt;267		int cth = current_theta();
268		setServoPulse(TILT_SERVO, 1200 + ((int)elevation * 10));
269	
270		if (atZero) {
271	
272			setServoPulse(PAN_SERVO, 1700);
273			delay(400);
274			cth = 0;
275			atZero = false;
276		}
</Source>
        <MessageVariables>
          <MessageVariable Name="cth" Index="1" />
          <MessageVariable Name="azimuth" Index="2" />
          <MessageVariable Name="atZero" Index="3" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="15" Name="sun_tracker_pwm.ino, line 151" Id="10d0863b-d896-423d-a67c-c255540091f7" Enabled="0" Message="{val} {theta} {targetAngle}" MessageTextType="2" PreProcessedMessage="{0} {1} {2}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\sun_tracker_pwm\sun_tracker_pwm.ino" FileLine="151" FileColumn="1" FunctionName="read_pin(void *context)" FunctionLineOffset="5" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='10d0863b-d896-423d-a67c-c255540091f7'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>144		//}
145	}
146	
147	void read_pin(void *context) {
148	
149		int val = analogRead(PAN_SERVO_PIN); // Calculate angle
150	
--&gt;151		theta = map(val, 0, 1023, 0, 360);
152	
153		if (targetAngle == 0) {
154	
155			if (val &lt; 9 || val == 1023) {
156				setServoPulse(PAN_SERVO, 1450);
157			}
158		}
159		else {
160			if (direction) {
</Source>
        <MessageVariables>
          <MessageVariable Name="val" Index="1" />
          <MessageVariable Name="theta" Index="2" />
          <MessageVariable Name="targetAngle" Index="3" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="16" Name="sun_tracker_pwm.ino, line 156" Id="1770b7b4-5d99-4590-ae70-7fb8e1870951" Enabled="1" Message="'stop  {val} stop {theta}' " MessageTextType="0" PreProcessedMessage="'stop  {0} stop {1}' " Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\sun_tracker_pwm\sun_tracker_pwm.ino" FileLine="156" FileColumn="1" FunctionName="read_pin(void *context)" FunctionLineOffset="10" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1770b7b4-5d99-4590-ae70-7fb8e1870951'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>149		int val = analogRead(PAN_SERVO_PIN); // Calculate angle
150	
151		theta = map(val, 0, 1023, 0, 360);
152	
153		if (targetAngle == 0) {
154	
155			if (val &lt; 9 || val == 1023) {
--&gt;156				setServoPulse(PAN_SERVO, 1450);
157			}
158		}
159		else {
160			if (direction) {
161				if (theta &gt;= targetAngle) {
162					setServoPulse(PAN_SERVO, 1450);
163				}
164			}
165			else {
</Source>
        <MessageVariables>
          <MessageVariable Name="val" Index="1" />
          <MessageVariable Name="theta" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="17" Name="Compass.ino, line 60" Id="a18cbcc5-95d0-45ee-9c5e-ccbf877a2c08" Enabled="1" Message="{heading}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\compass\compass.ino" FileLine="60" FileColumn="1" FunctionName="read_compass(void *context)" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='a18cbcc5-95d0-45ee-9c5e-ccbf877a2c08'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>53		//	/* Still calibrating, so measure but don't print */
54		//}
55		//else {
56		//	Serial.println(heading);
57		//}
58	}
59	void read_compass(void *context) {
--&gt;60		int heading = compass.readHeading();
61	}
62	void read_pin(void *context) {
63	
64		int val = analogRead(PAN_SERVO_PIN); // Calculate angle
65	
66		theta = map(val, 0, 1023, 0, 360);
67	
68		if (targetAngle == 0) {
69	
</Source>
        <MessageVariables>
          <MessageVariable Name="heading" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="18" Name="Compass.ino, line 66" Id="e6dd1a41-325e-42e6-a1c2-d6668d0bde4f" Enabled="1" Message="{theta}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\compass\compass.ino" FileLine="66" FileColumn="1" FunctionName="read_pin(void *context)" FunctionLineOffset="5" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='e6dd1a41-325e-42e6-a1c2-d6668d0bde4f'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>59	void read_compass(void *context) {
60		int heading = compass.readHeading();
61	}
62	void read_pin(void *context) {
63	
64		int val = analogRead(PAN_SERVO_PIN); // Calculate angle
65	
--&gt;66		theta = map(val, 0, 1023, 0, 360);
67	
68		if (targetAngle == 0) {
69	
70			if (val &lt; 9 || val == 1023) {
71				setServoPulse(PAN_SERVO, 1450);
72			}
73		}
74		else {
75			if (direction) {
</Source>
        <MessageVariables>
          <MessageVariable Name="theta" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="19" Name="Compass.ino, line 56" Id="40e42cb6-f077-4b4b-962c-908daef1aad4" Enabled="1" Message="{heading}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\compass\compass.ino" FileLine="56" FileColumn="1" FunctionName="loop()" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='40e42cb6-f077-4b4b-962c-908daef1aad4'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>49		t.update();
50		t1.update();
51		//int heading = compass.readHeading();
52		//if (heading == 0) {
53		//	/* Still calibrating, so measure but don't print */
54		//}
55		//else {
--&gt;56		//	Serial.println(heading);
57		//}
58	}
59	void read_compass(void *context) {
60		int heading = compass.readHeading();
61	}
62	void read_pin(void *context) {
63	
64		int val = analogRead(PAN_SERVO_PIN); // Calculate angle
65	
</Source>
        <MessageVariables>
          <MessageVariable Name="heading" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="20" Name="sun_tracker_pwm.ino, line 216" Id="ff5ed91a-cada-4dbd-aee0-43f1044a1009" Enabled="0" Message="'theta after move {current_theta()}'" MessageTextType="0" PreProcessedMessage="'theta after move {0}'" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\etsar\documents\arduino\sun_tracker_pwm\sun_tracker_pwm.ino" FileLine="216" FileColumn="1" FunctionName="setServoPulse(uint8_t n, double pulse)" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ff5ed91a-cada-4dbd-aee0-43f1044a1009'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>209		double pulselength;
210	
211		pulselength = 1000000;   // 1,000,000 us per second
212		pulselength /= 60;   // 60 Hz
213		pulselength /= 4096;  // 12 bits of resolution
214	   // pulse *= 1000000;  // convert to us
215		pulse /= pulselength;
--&gt;216		pwm.setPWM(n, 0, pulse);
217		delay(20);
218	}
219	
220	int current_theta() {
221	
222		//// Measure feedback signal high/low times.
223		//tLow = pulseIn(TILT_SERVO_PIN, 1);            // Measure low time 
224		//tHigh = pulseIn(TILT_SERVO_PIN, 0);           // Measure high time
225	
</Source>
        <MessageVariables>
          <MessageVariable Name="current_theta()" Index="1" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>